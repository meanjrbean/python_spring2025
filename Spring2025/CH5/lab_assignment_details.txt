STARTING OUT WITH PYTHON
CHAPTER'S:
• CHAPTER 5 - FUNCTIONS
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
LAB
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

Specifications:

Create a program that uses a function to simulate the roll of a die.  Whenever it’s helpful, use functions to split
your code into other functions.
    • The program should roll two six-sided dice, add the total of the two
    • Display the results of the dice values
    • Also, display a special additional message for rolling certain combinations.  Two ones (Snake eyes!),
        Two sixes (Boxcars!), Two 2s (Ballerina!), Two 4s (Square Pair).  You can find websites with these
        "colorful dice combinations" so feel free to add as many additional named combinations as you would like to.
    • Write the code to display the title in it's own function.
    • Write the code that generates a value for a single die roll in a function named "roll()".
        HINT: you'll use the "randint()" function that's part of the "random module" in this function in order to get a
        random result between 1 and 6 to return.
    • Write the code to obtain a value for two dice rolls, add them together, and print the results in a function named
        "roll_dice()".  This will be a void function that doesn't return a value.
    • Lastly, in a main() function, write the code that.
    • Calls the functions to display the title.
        ○ Ask the user if they want to roll the dice the first time.
        ○ Loops until the user is ready to call it quits for the night.
            · Calls the roll_dice() function.
            · Ask the user if they want to roll again.

Hint: Near the bottom of the loop you should use the same variable to save the user choice for continuing or not that
you initialize prior to a While loop.  Doing so will allow you to check a single variable in your While loop statement
rather than something more complex.

Using the sample output below be sure to generate spacing between each roll.
SAMPLE INPUT/OUTPUT (your output should match this):

Dice Roller
Roll the dice? (y/n): y
Die 1: 3
Die 2: 6
Total: 9

Roll again? (y/n): y
Die 1: 1
Die 2: 1
Total: 2
Snake eyes!

Roll again? (y/n): y
Die 1: 6
Die 2: 6
Total: 12
Boxcars!

Roll again? (y/n): n
Bye!

▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
ASSIGNMENT
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

Create a program that converts feet to meters and vice versa.

The formula for converting meters to feet is: feet = meters / 0.3048
The formula for converting feet to meters is: meters = feet * 0.3048

Specifications:

    • Store the code that performs the actual conversions in separate functions within a separate code module named
        "conversions.py". These two functions will take a single parameter and return the resulting conversion value.
    • Start a new .py file and use an "import" statement to import your custom module into this new file.
    • Write a separate function to display the program banner/title.
    • Write a separate function to display the menu as shown below in the sample output.
    • Write the rest of the code to (1) take the user input (2) call the proper functions (3) display output all in a
        main() function.
            ○ Note: The code inside the main() function should continue inside a While loop until the user is ready to
                quit.

Coding steps:

    1. Display the title by calling the correct function
    2. Display the menu by calling the correct function
    3. Begin a loop and first ask the user for a conversion choice - save the input to a variable
    4. Use an "if/elif/else" to determine which choice was made.  If something was entered other than "a" or "b" alert
        the user.
    5. If the choice is "a" or "b" then ask for the number of feet or meters.  Make sure to convert this input to
        float() and save the result to a variable.
    6. Call the correct function from the "conversion.py" module, passing in the user input,  to do the conversion
        calculation.
    7. Print the results using the round() function
    8. Prompt the user to continue or not.  Exit the loop on "n" and print "Bye!"
        ○ NOTE: You can assume the user will enter valid data (no validation code required). Also, the program should
            round results to a maximum of two decimal places.

SAMPLE INPUT/OUTPUT (your output should match this):
Feet and Meters Converter

Conversions Menu:
a. Feet to Meters
b. Meters to Feet

Select a conversion (a/b): a
Enter feet: 100

The answer is 30.48 meters

Would you like to perform another conversion? (y/n): y

Conversions Menu:
a. Feet to Meters
b. Meters to Feet

Select a conversion (a/b): b
Enter meters: 100

The answer is 328.08 feet

Would you like to perform another conversion? (y/n): n
Thanks, bye!
